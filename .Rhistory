subset(`Dataset ID` == id)%>%
group_by(`grazed`,
`grazing_intensity`, `abandoned`, `natural_grassland`,
`mowing_frequency`, `mown`, `Mowing (1/0)`)%>%
summarise(n=n())%>%
spread(`grazed`, n)
}
table_mown <- function(data, id){
data%>%
subset(`Dataset ID` == id)%>%
group_by(`mown`,
`grazing_intensity`, `abandoned`, `natural_grassland`,
`mowing_frequency`, `mown`, `Mowing (1/0)`)%>%
summarise(n=n())%>%
spread(`mown`, n)
}
path_grassplot <- './'
df <- readRDS(file.path(path_grassplot, 'Grassplot 1.8_Data.rds'))
df <- df %>%
mutate_at(.vars = c(95:104), funs(ifelse(. %in% c('NA', '[NA]'), NA, .)))
# The columns 98 (mowing frequency) and 100 (grazing intensity) are renamed:
names(df)[c(98,100)] <- c('mowing_frequency', 'grazing_intensity')
### Correction of the land use column
lut <- read_excel(file.path(path_grassplot, "lookup_table_LU.xlsx" ),
sheet = 'global_land_use')
# The global_land_use lookup table is used to harmonize the column 95 with the new binary columns:
df <- df %>%
left_join(lut, by = c("Land use (5 standard categories: mown, grazed, abandoned, natural grassland, NA)" = "old_classification"))
### Matching new binary columns and intensity columns
#### Mowing and mowing intensity
# Datasets containing plots for which mowing intensity > 0 & mown != 1) (here and after, we refer to the new binary columns)
df %>%
filter(`mown` != 1 & `mowing_frequency` != '0' )%>%
distinct(`Dataset ID`)%>%
pull()
# EU_K contains resp. 4 and 4 plots classified as natural_grassland with a mowing frequency of resp. 0.03 and 4. Only the plots with a frequency >= 0.2 will be classified as mown (abandoned less than 5 years).
# EU_K contains resp. 12, 84, 30, 4 and 12 plots classified as abandoned with a mowing frequency of resp. 0.03, 0.05, 0.1, 0.2, 0.3. Only the plots with a frequency >= 0.2 will be classified as mown (abandoned less than 5 years).
df[df$`Dataset ID` == 'EU_K' & df$mowing_frequency %in% c('4', '1', '0.5', '0.3', '0.2'),] %<>%
mutate(mown = 1)
# CZ_J contains plot classified as abandoned which have a mowing frequency == 0.05. These will not be classified as mown. (I could not find the original land-use information in CZ_J.xls)
#### Grazing and Grazing intensity
# Datasets containing plots for which grazing intensity > 0 & grazed != 1)
df %>%
filter(`grazed` != 1 & `grazing_intensity` != '0')%>%
distinct(`Dataset ID`)%>%
pull()
# IR_A contains 34 plots classified as mown which have a grazing_intensity == 0.1. These plots will be classified as grazed (and also remain mown as indicated in the original database IR_A.xls). **Note for Idoia** In the original DB, the grazing intensity is noted as 1, 2, 3. Is it correct that it stands for low, medium and high intensity, and hence translate as 0.1, 0.5, 1 in the master file?
table_grazed(df, 'IR_A')
df[df$`Dataset ID` == 'IR_A',] %<>%
mutate(grazed = ifelse(grazing_intensity != '0', 1, 0))
table_grazed(df, 'IR_A')
# PL_D contains 39 plots classified as mown which have a grazing_intensity == 0.5. These plots will be classified as grazed. (No composition data, so I could not check the original dataset)
table_grazed(df, 'PL_D')
df[df$`Dataset ID` == 'PL_D' & df$grazing_intensity  %in% '0.5',] %<>%
mutate(grazed = 1)
table_grazed(df, 'PL_D')
# TR_B contains 32 plots classified as abandoned which have a grazing_intensity == 0.1. These plots will be classified as grazed (no further info could be found in TR_B.xls)
table_grazed(df, 'TR_B')
df[df$`Dataset ID` == 'TR_B' & df$grazing_intensity  %in% '0.1',] %<>%
mutate(grazed = 1)
table_grazed(df, 'TR_B')
# UA_G contains reps. 12, 15, 30 and 3 plots classified as natural_grassland which have a grazing_intensity == 'high', 'low', 'middle' or 'overgrazing'. These plots will be classified as grazed (I could not find the original land-use information in UA_G.xls)
table_grazed(df, 'UA_G')
df[df$`Dataset ID` == 'UA_G' & df$grazing_intensity %in%
c('high', 'low', 'middle', 'overgrazing'),] %<>%
mutate(grazed = 1)
table_grazed(df, 'UA_G')
# EU_K contains 4 plots classified as natural_grassland which have a grazing_intensity == 0.5. These plots will be classified as grazed (no further info could be found in EU_K.xls)
table_grazed(df, 'EU_K')
df[df$`Dataset ID` == 'EU_K' & df$grazing_intensity %in% '0.5',] %<>%
mutate(grazed = 1)
table_grazed(df, 'EU_K')
df %>%
filter(`mown` == 0 | is.na(mown))%>%
distinct(`Mowing (1/0`)%>%
pull()
df %>%
filter(`mown` == 0 | is.na(mown))%>%
distinct(`Mowing (1/0)`)%>%
pull()
df %>%
filter(`mown` == 0 | is.na(mown))%>%
distinct(`Mowing (1/0)`)%>%
pull()->a
is.na(a)
na.omit(a)
a[!is.na(a)]
a[!is.na(a) & a != 0]
unique_binary <- df %>%
filter(`mown` == 0 | is.na(mown))%>%
distinct(`Mowing (1/0)`)%>%
pull()
unique_binary <- unique_binary[!is.na(unique_binary) & unique_binary != 0]
for(i in unique_binary){
nb_plots_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
nb_plots_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
if(nb_plots_0 != 0)
print(paste("There are", nb_plots_0, "plots with mown == 0 and Mowing (1/0) =", i))
}
a[!is.na(a) & a != 0]
i <- "?"
nb_plots_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
nb_plots_0
names_datasets_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
nb_plots_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
nb_plots_NA
for(i in unique_binary){
nb_plots_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
nb_plots_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
if(nb_plots_0 != 0)
print(paste("There are", nb_plots_0, "plots with mown == 0 and Mowing (1/0) =", i))
if(nb_plots_0 != 0)
print(paste("There are", nb_plots_0, "plots with mown = NA and Mowing (1/0) =", i))
}
for(i in unique_binary){
nb_plots_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
nb_plots_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
if(nb_plots_0 != 0)
print(paste("There are", nb_plots_0, "plots with mown == 0 and Mowing (1/0) =", i))
if(nb_plots_NA != 0)
print(paste("There are", nb_plots_NA, "plots with mown = NA and Mowing (1/0) =", i))
}
for(i in unique_binary){
nb_plots_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
nb_plots_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
if(nb_plots_0 != 0)
print(paste("The dataset(s)", names_datasets_0, "contain(s)",
nb_plots_0, "plots with mown == 0 and Mowing (1/0) =", i))
if(nb_plots_NA != 0)
print(paste("The dataset(s)", names_datasets_NA, "contain(s)",
nb_plots_NA, "plots with mown = NA and Mowing (1/0) =", i))
}
for(i in unique_binary){
nb_plots_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`Dataset ID`)%>% pull()
nb_plots_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`Dataset ID`)%>% count()
names_datasets_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% pull()
if(nb_plots_0 != 0)
print(paste("The dataset(s)", names_datasets_0, "contain(s)",
nb_plots_0, "plots with mown == 0 and Mowing (1/0) =", i))
if(nb_plots_NA != 0)
print(paste("The dataset(s)", names_datasets_NA, "contain(s)",
nb_plots_NA, "plots with mown = NA and Mowing (1/0) =", i))
}
for(i in unique_binary){
nb_plots_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_0 <- df %>%
filter(`mown` == 0 & `Mowing (1/0)` == i)%>%
distinct(`Dataset ID`)%>% pull()
nb_plots_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_NA <- df %>%
filter(is.na(`mown`) & `Mowing (1/0)` == i)%>%
distinct(`Dataset ID`)%>% pull()
if(nb_plots_0 != 0)
print(paste("The dataset(s)", names_datasets_0, "contain(s)",
nb_plots_0, "plots with mown == 0 and Mowing (1/0) =", i))
if(nb_plots_NA != 0)
print(paste("The dataset(s)", names_datasets_NA, "contain(s)",
nb_plots_NA, "plots with mown = NA and Mowing (1/0) =", i))
}
names(df)
table(df$burnt)
sum(is.na(df$burnt))
names(df)
unique_binary <- df %>%
filter(`burnt` == 0 | is.na(burnt))%>%
distinct(`Burning (1/0)`)%>%
pull()
unique_binary
unique_binary <- unique_binary[!is.na(unique_binary) & unique_binary != 0]
unique_binary
i <- "1"
nb_plots_0 <- df %>%
filter(`burnt` == 0 & `Burning (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_0 <- df %>%
filter(`burnt` == 0 & `Burning (1/0)` == i)%>%
distinct(`Dataset ID`)%>% pull()
nb_plots_NA <- df %>%
filter(is.na(`burnt`) & `Burning (1/0)` == i)%>%
distinct(`GrassPlot ID of plot`)%>% count()
names_datasets_NA <- df %>%
filter(is.na(`burnt`) & `Burning (1/0)` == i)%>%
distinct(`Dataset ID`)%>% pull()
names_datasets_NA
names_datasets_0
nb_plots_0 != 0
paste("The dataset(s)", names_datasets_0, "contain(s)",
nb_plots_0, "plots with burnt == 0 and Burning (1/0) =", i)
print(paste("The dataset(s)", c(names_datasets_0), "contain(s)",
nb_plots_0, "plots with burnt == 0 and Burning (1/0) =", i))
paste(names_datasets_0, collapse = ",")
paste(names_datasets_0, collapse = ", ")
table(df$burnt)
names(df)
tempfile()
shell.exec(tempfile())
shell.exec(temdir())
shell.exec(tempdir())
install.packages("float")
??float
?kable_styling
?kable::kable_styling
?kableExtra::kable_styling
options(warn = 0)
library(readxl)
library(tidyverse)
library(magrittr)
library(knitr)
library(kableExtra)
table_grazed <- function(data, id){
data%>%
subset(`Dataset ID` == id)%>%
group_by(`grazed`,
`grazing_intensity`, `abandoned`, `natural_grassland`,
`mowing_frequency`, `mown`, `Mowing (1/0)`)%>%
summarise(n=n())%>%
spread(`grazed`, n)
}
table_mown <- function(data, id){
data%>%
subset(`Dataset ID` == id)%>%
group_by(`mown`,
`grazing_intensity`, `abandoned`, `natural_grassland`,
`mowing_frequency`, `mown`, `Mowing (1/0)`)%>%
summarise(n=n())%>%
spread(`mown`, n)
}
path_grassplot <- 'C:/Users/vincent/Documents/grassplot'
df <- readRDS(file.path(path_grassplot, 'Grassplot 1.8_Data.rds'))
df <- df %>%
mutate_at(.vars = c(95:104), funs(ifelse(. %in% c('NA', '[NA]'), NA, .)))
# The columns 98 (mowing frequency) and 100 (grazing intensity) are renamed:
names(df)[c(98,100)] <- c('mowing_frequency', 'grazing_intensity')
### Correction of the land use column
lut <- read_excel(file.path(path_grassplot, "lookup_table_LU.xlsx" ),
sheet = 'global_land_use')
# The global_land_use lookup table is used to harmonize the column 95 with the new binary columns:
df <- df %>%
left_join(lut, by = c("Land use (5 standard categories: mown, grazed, abandoned, natural grassland, NA)" = "old_classification"))
path_grassplot <- './grassplot'
df <- readRDS(file.path(path_grassplot, 'Grassplot 1.8_Data.rds'))
df <- df %>%
mutate_at(.vars = c(95:104), funs(ifelse(. %in% c('NA', '[NA]'), NA, .)))
# The columns 98 (mowing frequency) and 100 (grazing intensity) are renamed:
names(df)[c(98,100)] <- c('mowing_frequency', 'grazing_intensity')
### Correction of the land use column
lut <- read_excel(file.path(path_grassplot, "lookup_table_LU.xlsx" ),
sheet = 'global_land_use')
# The global_land_use lookup table is used to harmonize the column 95 with the new binary columns:
df <- df %>%
left_join(lut, by = c("Land use (5 standard categories: mown, grazed, abandoned, natural grassland, NA)" = "old_classification"))
df <- readRDS(file.path(path_grassplot, 'Grassplot 1.8_Data.rds'))
path_grassplot <- './grassplot'
path_grassplot <- './'
df <- readRDS(file.path(path_grassplot, 'Grassplot 1.8_Data.rds'))
df <- df %>%
mutate_at(.vars = c(95:104), funs(ifelse(. %in% c('NA', '[NA]'), NA, .)))
# The columns 98 (mowing frequency) and 100 (grazing intensity) are renamed:
names(df)[c(98,100)] <- c('mowing_frequency', 'grazing_intensity')
### Correction of the land use column
lut <- read_excel(file.path(path_grassplot, "lookup_table_LU.xlsx" ),
sheet = 'global_land_use')
# The global_land_use lookup table is used to harmonize the column 95 with the new binary columns:
df <- df %>%
left_join(lut, by = c("Land use (5 standard categories: mown, grazed, abandoned, natural grassland, NA)" = "old_classification"))
names(df)
table(df$`Ex arable years (years since last ploughing)`)
class(df$`Ex arable years (years since last ploughing)`)
unique(df$mowing_frequency)
unique(df$grazing_intensity)
length(unique(df$grazing_intensity))
length(unique(as.numeric(df$grazing_intensity)))
options()$warn
?options
?options <- -1
length(unique(as.numeric(df$grazing_intensity)))
options()$warn <- -1
options(warn = -1)
length(unique(as.numeric(df$grazing_intensity)))
length(na.omit(unique(as.numeric(df$grazing_intensity))))
na.omit(unique(as.numeric(df$grazing_intensity))
mowing_values <- na.omit(unique(df$mowing_intensity))
mowing_values
unique(df$mowing_intensity)
mowing_values <- na.omit(unique(df$mowing_frequency))
mowing_values
print(mowing_values)
print(as.chracter(mowing_values))
print(as.character(mowing_values))
table(df$grazing_intensity)
table(df$mowing_frequency)
grazing_values <- na.omit(unique(df$grazing_intensity))
mowing_values <- na.omit(unique(df$mowing_frequency))
numeric_grazing_values <- na.omit(unique(as.numeric(df$grazing_intensity)))
numeric_mowing_values <- na.omit(unique(as.numeric(df$mowing_frequency)))
non_num_mowing <- setdiff(mowing_values, numeric_mowing_values)
non_num_grazing <- setdiff(grazing_values, numeric_grazing_values)
dim(df[df$grazing_intensity %in% c('overgrazing', 'high'),])
df[df$grazing_intensity %in% c('overgrazing', 'high'),]%<>%
mutate(grazing_intensity = 1)
table(df$grazing_intensity)
df[df$grazing_intensity %in% c('middle'),]%<>%
mutate(grazing_intensity = 0.5)
df[df$grazing_intensity %in% c('low'),]%<>%
mutate(grazing_intensity = 0.1)
table(df$grazing_intensity)
class(df$grazing_intensity)
options(warn = 0)
library(readxl)
library(tidyverse)
library(magrittr)
library(knitr)
library(kableExtra)
table_grazed <- function(data, id){
data%>%
subset(`Dataset ID` == id)%>%
group_by(`grazed`,
`grazing_intensity`, `abandoned`, `natural_grassland`,
`mowing_frequency`, `mown`, `Mowing (1/0)`)%>%
summarise(n=n())%>%
spread(`grazed`, n)
}
table_mown <- function(data, id){
data%>%
subset(`Dataset ID` == id)%>%
group_by(`mown`,
`grazing_intensity`, `abandoned`, `natural_grassland`,
`mowing_frequency`, `mown`, `Mowing (1/0)`)%>%
summarise(n=n())%>%
spread(`mown`, n)
}
path_grassplot <- './'
df <- readRDS(file.path(path_grassplot, 'Grassplot 1.8_Data.rds'))
df <- df %>%
mutate_at(.vars = c(95:104), funs(ifelse(. %in% c('NA', '[NA]'), NA, .)))
# The columns 98 (mowing frequency) and 100 (grazing intensity) are renamed:
names(df)[c(98,100)] <- c('mowing_frequency', 'grazing_intensity')
### Correction of the land use column
lut <- read_excel(file.path(path_grassplot, "lookup_table_LU.xlsx" ),
sheet = 'global_land_use')
# The global_land_use lookup table is used to harmonize the column 95 with the new binary columns:
df <- df %>%
left_join(lut, by = c("Land use (5 standard categories: mown, grazed, abandoned, natural grassland, NA)" = "old_classification"))
# Replacement of odd values and conversion to numerical
df$mowing_frequency <- as.numeric(df$mowing_frequency)
df[df$grazing_intensity %in% c('overgrazing', 'high'),]%<>%
mutate(grazing_intensity = 1)
df[df$grazing_intensity %in% c('middle'),]%<>%
mutate(grazing_intensity = 0.5)
df[df$grazing_intensity %in% c('low'),]%<>%
mutate(grazing_intensity = 0.1)
df$grazing_intensity <- as.numeric(df$grazing_intensity)
table(df$mowing_frequency)
sum(df$mowing_frequency != 0)
sum(df$mowing_frequency != 0, na.rm = T)
sum(df$mowing_frequency != '0', na.rm = T)
class(df$mowing_frequency)
sum(df$mowing_frequency < 0, na.rm = T)
sum(df$mowing_frequency == 0, na.rm = T)
sum(df$mowing_frequency > 0, na.rm = T)
54/12
30800/12
df%>%
group_by(`mown`, `mowing_frequency`)%>%
summarise(n=n())%>%
spread(`mown`, n)%>%
kable(caption = 'Contingency table of columns mown and mowing_frequency')%>%
kable_styling(latex_options = "HOLD_position")
?kable_styling
mowing_0_intensity_1 <- df %>%
filter(`mown` != 1 & `mowing_frequency` != '0' )
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
options(kableExtra.latex.load_packages = FALSE)
options(warn = 0)
library(readxl)
library(tidyverse)
library(magrittr)
library(knitr)
library(kableExtra)
library(float)
path_grassplot <- './'
ds_mown <- mowing_0_intensity_1%>%
distinct(`Dataset ID`)%>%
pull()
ds_mown
plots_mown <- mowing_0_intensity_1%>%
distinct(`GrassPlot ID of plot`)%>%
pull()
dim(df[df$mowing_frequency > 0,])
dim(df[df$mowing_frequency != 0,])
table(df$mowing_frequency)
dim(df[df$mowing_frequency !%in% 0,])
dim(df[df$mowing_frequency %in 0,])
dim(df[df$mowing_frequency %in% 0,])
dim(df[!is.na(df$mowing_frequency) != 0,])
dim(df[df$mowing_frequency != 0 | !is.na(df$mowing_frequency),])
dim(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency),])
16+15+30+4+12+31+2165+15
16+15+30+4+12+31+216+15
16+159+30+4+12+31+216+15
table(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency),]$mowing_frequency)
sum(dim(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown == 0,]))
sum(dim(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown %in% 0,]))
sum(dim(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown %in% 1,]))
sum(dim(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown == 1,]))
(dim(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown == 1,]))
(dim(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown %in% 1,])
)
length(unique(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown %in% 1,]$`GrassPlot ID of the plot`)
)
length(unique(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown %in% 1,]$`GrassPlot ID of plot`))
mowing_0_intensity_1 <- df %>%
filter(`mown` != 1 & `mowing_frequency` != 0 )
dim(subset(df, df$mown == 1 & df$mowing_frequency != 0))
dim(df %>%
+           filter(`mown` != 1 & `mowing_frequency` != 0 ))
dim(df %>%
filter(`mown` != 1 & `mowing_frequency` != 0 ))
table(df$mown, df$mowing_frequency)
16+159+30+4+12
16+159+30+4+12+4
258-225
setdiff(subset(df, df$mown == 1 & df$mowing_frequency != 0)$`GrassPlot ID of plot`, plots_mown)
setdiff(plots_mown, subset(df, df$mown == 1 & df$mowing_frequency != 0)$`GrassPlot ID of plot`)
head(plots_mown)
dim(subset(df, df$mown == 0 & df$mowing_frequency != 0))
dim(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown == 0,])
dim(df[df$mowing_frequency != 0 & !is.na(df$mowing_frequency) & df$mown == 0,])
sum(nb_plots_grazed <- sum(df$grazed, na.rm = T)
grazing_0_intensity_1 <- df %>%
filter(`grazed` != 1 & `grazing_intensity` != 0 )
ds_grazed <- grazing_0_intensity_1%>%
distinct(`Dataset ID`)%>%
pull()
plots_grazed <- grazing_0_intensity_1%>%
distinct(`GrassPlot ID of plot`)%>%
pull())
nb_plots_grazed <- sum(df$grazed, na.rm = T)
grazing_0_intensity_1 <- df %>%
filter(`grazed` != 1 & `grazing_intensity` != 0 )
ds_grazed <- grazing_0_intensity_1%>%
distinct(`Dataset ID`)%>%
pull()
plots_grazed <- grazing_0_intensity_1%>%
distinct(`GrassPlot ID of plot`)%>%
pull()
dim(grazing_0_intensity_1)
length(unique(grazing_0_intensity_1$`GrassPlot ID of plot`))
sum(is.duplicated(grazing_0_intensity_1$`GrassPlot ID of plot`))
sum(duplicated(grazing_0_intensity_1$`GrassPlot ID of plot`))
